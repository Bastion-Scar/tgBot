package handler

import (
	"awesomeProject8/questions"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
)

var userProgress = make(map[int64]int)
var userCorrectAnswers = make(map[int64]int)

func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update, questionService *questions.Service) {
	if update.Message != nil && update.Message.Text == "/start" {
		log.Println("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ start")
		chatID := update.Message.Chat.ID
		userProgress[chatID] = 0
		userCorrectAnswers[chatID] = 0
		sendQuestion(bot, chatID, questionService)
	}

	if update.CallbackQuery != nil {
		processAnswer(bot, *update.CallbackQuery, questionService)
	}
}
func sendQuestion(bot *tgbotapi.BotAPI, chatID int64, questionService *questions.Service) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–ª–µ—Ç
	ticketIndex := userProgress[chatID]
	if ticketIndex >= len(questionService.Tickets) {
		msg := tgbotapi.NewMessage(chatID, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –±–∏–ª–µ—Ç—ã —ç—Ç–æ–π Z –±–∞–±–∫–∏! /start –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ - @SlaughterContinues (–ë–æ—Ç –Ω–µ –ª–æ–≥–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, —è –Ω–µ –≤–∏–∂—É –∫—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç)")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–ª–µ—Ç –∏ –≤–æ–ø—Ä–æ—Å
	ticket := questionService.Tickets[ticketIndex]
	qIndex := userCorrectAnswers[chatID]

	// –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–º –±–∏–ª–µ—Ç–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∏–ª–µ—Ç—É
	if qIndex >= len(ticket.Questions) {
		userProgress[chatID]++
		sendQuestion(bot, chatID, questionService) // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∏–ª–µ—Ç—É
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É
	q := ticket.Questions[qIndex]

	// üî¢ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ + –≤–∞—Ä–∏–∞–Ω—Ç—ã
	messageText := q.Text + "\n\n"
	for i, option := range q.Options {
		messageText += strconv.Itoa(i+1) + ". " + option + "\n"
	}

	// üéõ –ö–Ω–æ–ø–∫–∏: –ø—Ä–æ—Å—Ç–æ 1, 2, 3, 4
	var buttons []tgbotapi.InlineKeyboardButton
	for i := range q.Options {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(strconv.Itoa(i+1), strconv.Itoa(i)))
	}
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons)

	// üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func processAnswer(bot *tgbotapi.BotAPI, callbackQuery tgbotapi.CallbackQuery, questionService *questions.Service) {
	chatID := callbackQuery.Message.Chat.ID
	ticketIndex := userProgress[chatID]
	ticket := questionService.Tickets[ticketIndex]

	qIndex := userCorrectAnswers[chatID]
	q := ticket.Questions[qIndex]

	userAnswerIndex, _ := strconv.Atoi(callbackQuery.Data)
	correct := userAnswerIndex == q.Answer

	var reply string
	if correct {
		reply = "‚úÖ –í–µ—Ä–Ω–æ"
		userCorrectAnswers[chatID]++ // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
	} else {
		reply = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + q.Options[q.Answer]
		userCorrectAnswers[chatID]++ // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
	}

	msg := tgbotapi.NewMessage(chatID, reply)
	bot.Send(msg)

	// –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
	edit := tgbotapi.NewEditMessageReplyMarkup(
		chatID,
		callbackQuery.Message.MessageID,
		tgbotapi.InlineKeyboardMarkup{},
	)
	bot.Send(edit)

	// –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∏–ª–µ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∏–ª–µ—Ç—É
	if userCorrectAnswers[chatID] >= len(ticket.Questions) {
		userProgress[chatID]++         // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∏–ª–µ—Ç—É
		userCorrectAnswers[chatID] = 0 // –°–±—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
	sendQuestion(bot, chatID, questionService)
}
